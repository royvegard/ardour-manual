<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book [
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % dbcent PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN"
   "/usr/share/xml/docbook/schema/dtd/4.5/dbcentx.mod">
%dbcent;
<!ENTITY % keys SYSTEM "keys.ent">
%keys;
<!ENTITY % extensions SYSTEM "extensions.ent">
%extensions;
]>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en">
<title>Sessions</title>

<para>
This chapter discusses Ardour sessions in more detail.
</para>

<section><title>Sessions and session files</title>

<para>
Generally speaking when we refer to a &lsquo;session&rsquo; we mean a
directory that Ardour has created which has a special structure.
Sessions can be used to contain any amount of data; a song, an album,
an live recording or whatever best suits you.
</para>

<para>
The two most important parts of a session are the <emphasis>state
files</emphasis> and the audio / MIDI data.  The state files are
written by Ardour (in XML) and hold details of what is in the session;
its tracks, busses, details of regions, automation, and much more.
The state file does not, however, contain any actual audio or MIDI
data.  These data are held in separate files, in standard formats
(typically WAV, AIFF and SMF<footnote><para>Standard MIDI
File</para></footnote>).  It is possible for more than one state file
to reference the same set of audio and MIDI data.
</para>

<para>
<xref linkend="fig-session"/> shows the structure of an Ardour session on disk.
</para>

<figure id="fig-session">
  <title>A session</title> 
  <mediaobject>
    <imageobject> 
      <imagedata fileref="diagrams/session&dia;"/>
    </imageobject> 
  </mediaobject>
</figure>

<para>
Note first the two files suffixed <code>.ardour</code>.  These are
state files.  They can have any names, but usually a session directory
contains one state file with the same name as the directory.
</para>

<para>
The audio and MIDI data for the session is held within the
<code>interchange</code> sub-directory, and Ardour will put any
exported files from your session into the <code>export</code>
sub-directory.
</para>

<para>
There are a few other directories within a session which you will usually not need to be concerned with:
</para>

<itemizedlist>
<listitem>
<code>plugins</code> &mdash; where data needed by plugins is stored.
</listitem>
<listitem>
<code>peaks</code> &mdash; Ardour uses this directory to store
&lsquo;peak files&rsquo; these are representations of audio regions
that it uses when displaying waveforms within regions.  They are
pre-computed and stored on disk to speed the response of the editor
window.
</listitem>
<listitem>
<code>analysis</code> &mdash; used to store spectral analysis data.
</listitem>
<listitem>
<code>dead</code> &mdash; this is where Ardour will move unused
files when you perform a session clean-up (see <xref
linkend="sec-session-clean-up"/>).
</listitem>
</itemizedlist>

</section> <!-- Sessions and session files -->

<section><title>Snapshots and save-as</title>

<para>
As mentioned above, a session directory can contain more than one
state file.  There will always be one &lsquo;active&rsquo; state file
that you are currently working with, but there may be others on disk.
There are two ways to create new state files for a session:
<emphasis>snapshot</emphasis> (the
<guimenuitem>Snapshot&hellip;</guimenuitem> on the
<guimenu>Session</guimenu> menu) and <emphasis>save-as</emphasis> (the
<guimenuitem>Save As&hellip;</guimenuitem>).
</para>

<para>
Both of these options take a copy of the currently-loaded session's
state and save it to a new state file.  The difference is that
<emphasis>after</emphasis> saving a snapshot, the session you are
editing remains the same as the one you were editing before.  After a
save-as, you are editing the newly-created state file.
</para>

<para>
Snapshot is useful, for example, when you are about to try something
drastic to a session which might not work; taking a snapshot before
you start makes it easy to revert back to how things were.
</para>

<para>
To look at the snapshots of the current session, open the editor list
and select the <guibutton>Snapshots</guibutton> tab.  The list will
show the existing snapshots, with a blue highlight on the current one.
Clicking on an alternate snapshot will switch to it.
</para>

<para>
You can rename or remove snapshots by right-clicking on their
names in the editor list and choosing an option from the menu.
</para>

</section> <!-- Snapshots and save-as -->

<section><title>Session templates</title>

<para>
By default, Ardour starts with an empty session containing only a
master bus.  If you frequently find yourself setting up the same
things when you create a new session, you may save time by using a
session template.  This is simply a session which can be used as a
basis when creating other sessions.
</para>

<para>
To create a session template from the current session, choose
<guimenuitem>Save Template&hellip;</guimenuitem> from the
<guimenu>Session</guimenu> menu.  You will be prompted to give a name
for the template.  From this point on, when creating a new session you
will be offered the option to create it based on your new template.
You can define as many templates as you wish.
</para>

<sidebar>
<para>
Session templates are stored in <code>~/.config/ardour3/templates</code>.
</para>
</sidebar>

<para>
Typical uses of templates might be to ensure that a particular session
property is always set up how you like, or to set up for a particular
recording situation; a &lsquo;live recording&rsquo; template, for
example, might have 32 numbered tracks set up, connected to your
soundcard's inputs, and record-enabled.
</para>

</section> <!-- Session templates -->

<section xml:id="sec-session-cleanup"><title>Session clean-up</title>

<para>
Generally speaking, Ardour is averse to deleting data.  If you delete
a region, the note Ardour has of the region's presence on its track is
removed, but the audio or MIDI data itself is not deleted.  This can
be handy if you change your mind about a deletion, and is of course
necessary to allow Ardour to offer undo.  Keeping audio or MIDI data
around does, however, require disk space.  To recover disk space from
unused audio and MIDI data by deleting them, you can use
<emphasis>session clean-up</emphasis>.
</para>

<para>
Clean-up proceeds in two phases.  First, select <guimenuitem>Clean-up
unused sources&hellip;</guimenuitem> from the
<guimenuitem>Clean-up</guimenuitem> submenu of the
<guimenu>Session</guimenu> menu.  This will search all playlists in
all snapshots of the current session, looking for audio or MIDI files
that are not being used.  These files will be moved to the
<code>dead</code> folder within the session folder, and Ardour will
tell you which files it moved.  Note that this operation destroys the
undo record, as Ardour can no longer undo some things if it has no
sound files to undo with.
</para>

<para>
On performing the clean-up, Ardour will tell you how much disk space
can be recovered by permanently deleting the &lsquo;dead&rsquo; sound
files.  To do this, re-start Ardour then choose <guimenuitem>Flush
Wastebasket</guimenuitem> from the <guimenuitem>Clean-up</guimenuitem>
menu.  <emphasis>This will permanently delete the files, with no hope
of recovery!</emphasis>
</para>

</section> <!-- Session clean-up -->

<section><title>Renaming</title>

<para>
Sessions can be renamed using the
<guimenuitem>Rename&hellip;</guimenuitem> option on the
<guimenu>Session</guimenu> menu.  Both the session's directory and
the current state file will be renamed.
</para>

</section> <!-- Renaming -->

</chapter>
