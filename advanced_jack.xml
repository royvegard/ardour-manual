<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book [
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % dbcent PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN"
   "/usr/share/xml/docbook/schema/dtd/4.5/dbcentx.mod">
%dbcent;
<!ENTITY % keys SYSTEM "keys.ent">
%keys;
<!ENTITY % extensions SYSTEM "extensions.ent">
%extensions;
]>

<chapter xml:id="ch-advanced-jack" xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en">
<title>Advanced JACK</title>

<section><title>Using JACK with multiple sound cards</title>

<para>
If you want to set up JACK to use multiple sound cards at the same
time, there are a number of options:
</para>

<orderedlist>

<listitem>
Use the <code>alsa_in</code> and <code>alsa_out</code> clients (Linux and ALSA only)

<para>
If you are using JACK on Linux and want to use additional devices that
have ALSA driver support (i.e. most PCI, USB and Bluetooth devices),
then this is the best option.
</para>

<para>
<code>alsa_in</code> and <code>alsa_out</code> are two clients written by
Torben Hohn that make a single ALSA device appear as a set
of JACK ports. They both use Erik de Castro Lopo's libsamplerate
library to do any resampling required to keep the audio in sync as the
clocks of each device drift over time.
</para>

<para>
To use them, you start JACK as normal. Then you start an instance of
<code>alsa_in</code> or <code>alsa_out</code> for each additional device
(and &lsquo;direction&rsquo;) that you want to use. <code>alsa_out</code> will create
a set of ports representing the playback capabilities of the device,
and <code>alsa_in</code> will represent the capture/recording
capabilities. These two clients must be run inside a terminal window; 
there is no GUI for either of them. They both take arguments very much
like those of the JACK ALSA backend, with some additional controls
that affect the way that resampling is done. Full details are
available in the manual pages for each client, which you can read in a
terminal window with the command
</para>

<programlisting>
man alsa_in
</programlisting>

This page covers both clients, since their arguments are identical.

Note that you can use these clients even if you are running JACK with
a FFADO-supported device. The requirement for ALSA support only
applies to the extra devices you want to use, not the one that JACK
itself is using.

</listitem>
<listitem> Use the JACK2 audio adapter(s) (Jack2 only)

<!-- XXX More information is needed on this option -->

</listitem>
<listitem> Using OS facilities to merge devices into a single pseudo-device

Both OS X and Linux provide ways to configure your machine so that it
appears to have a new audio device that is actually a combination of
one or more real devices. You can use this approach to create the
configuration you want to use and then start up JACK using that new
&lsquo;pseudo&rsquo; device.

<itemizedlist>
<listitem>OS X

You must perform these steps as a user with administrative
privileges. The first thing to do is to open up
<guimenuitem>Audio/MIDI Setup</guimenuitem> in the
<guimenu>Utilities</guimenu> submenu of
<guimenu>Applications</guimenu>. Go to the main menu bar, click on
<guibutton>Audio</guibutton> and then select <guimenu>Open aggregate
device editor</guimenu>. Follow the simple instructions to add the
each desired playback or capture device to your new aggregate
device. Then pick a name for the new device. This is the name you will
also use to choose the device for use with JACK.

<para>
Note that there are quite a few subtle bugs with Apple's &lsquo;aggregate
device&rsquo; facilities. Various things can happen that will cause the
device to lose all of its playback channels or all of its capture
channels, for example. If this happens, it is generally necessary to
close all applications that are using any audio devices, and quite
often a reboot is required.
</para>

<para>
Starting with JACK2 version 1.9.6, the CoreAudio backend can now
dynamically create &lsquo;aggregate devices&rsquo; when needed (like when the -C
and -P arguments are used to specify the separated input and output
devices).
</para>

</listitem>
<listitem>
Linux

You will need to use a text editor to create or add to your
<code>~/.asoundrc</code> file. This file is read by any ALSA application
(including JACK, if its using the ALSA backend) and can be used to
define pseudo-devices of many different kinds. The key idea here is
that you're going to define a new pseudo-device composed of 2 or more
other devices. In our example, we'll just focus on 2 devices being
merged into 1, where both devices have just 2 channels in and
out. This is the text you need to make sure is in <code>~/.asoundrc</code> (below,
we describe what this does):

<programlisting>
pcm.merge {
    type multi;
    slaves.a.pcm hw:0
    slaves.a.channels 2;
    slaves.b.pcm hw:1
    slaves.b.channels 2;
    bindings.0.slave a;
    bindings.0.channel 0;
    bindings.1.slave b;
    bindings.1.channel 0;
    bindings.2.slave a;
    bindings.2.channel 1;
    bindings.3.slave b;
    bindings.3.channel 1;
}
</programlisting>

</listitem>
</itemizedlist>

<para>
Lets see what this does:
</para>

<itemizedlist>
<listitem>
It defines a new audio pseudo-device called &lsquo;merge&rsquo;. You can use
  this name anywhere you might use the name of an ALSA audio device,
  such as <code>hw:0</code> or <code>hw:HDA</code> or <code>hw:DSP</code> or
  <code>plughw:1</code>.
</listitem>
<listitem>
It names <code>hw:0</code> as the first component (or &lsquo;slave&rsquo;) of
  this pseudo-device (<code>slave.a.pcm</code>) and <code>hw:1</code> as the
  second component (<code>slave.b.pcm</code>)
</listitem>
<listitem>
It states that the pseudo-device will use 2 channels from the
  first component and 2 channels from the 2nd component.
</listitem>
<listitem>
The lines containing <code>binding.</code> list, in order, which
channel of which component will correspond to the 4 channels of the
pseudo-device. In the mapping shown above, the first channel comes
from the first component, then the 2nd channel from the 2nd
component, the 3rd from the first component and the 4th from the
second component.
</listitem>
</itemizedlist>

<para>
Note that numbering of devices and channels in ALSA starts at zero,
not one.
</para>

<para>
The most important and complex part of the above definition is the
channel mappings defined by the bindings lines. A full channel mapping
definition consists of a pair of a lines of the following general
form:
</para>

<programlisting>
bindings.CHANNEL_OF_PSEUDO_DEVICE.slave SLAVE_DEVICE_THAT_WILL_PROVIDE_THIS_CHANNEL
bindings.CHANNEL_OF_PSEUDO_DEVICE.channel CHANNEL_OF_SLAVE_DEVICE_THAT_WILL_PROVIDE_THIS_CHANNEL
</programlisting>

<para>
So the specific pair of lines:
</para>

<programlisting>
bindings.0.slave a;
bindings.0.channel 0;
</programlisting>

<para>
mean that &lsquo;channel 0 of the pseudo-device will correspond to channel 0
of the first slave device'. Obviously by playing with this definition
you can create all sorts of wierd and wonderful mappings from the real
physical device channels to the pseudo-device channels. You probably
don't want to do that, though. The example above shows the most common
example: take the first N channels from the first device, and the
second M channels from the second device.
</para>

<para>
In theory, the above is enough to define a new pseudo-device, but many
applications, including JACK's ALSA backend, also want to open a
&lsquo;control device&rsquo; associated with the audio playback device. This is
where they can find out (and possibly control) various hardware
parameters associated with the device. Unfortunately there is no way
to merge these together in the same way, so we have to provide a
&lsquo;dummy&rsquo; control device definition that will keep such applications
happy. This definition looks like this:
</para>

<programlisting>
ctl.merge {
    type hw
    card 0
}
</programlisting>

<para>
Notice that name following the <code>ctl.</code> text must be the same as
the name following <code>pcm.</code> in the device definition above. The
control device definition we've given here effectively means <quote>if you
want to open the control device associated with &lsquo;merge', open the
control device associated with the first installed audio/MIDI
device</quote>. This probably isn't right of course &mdash; &lsquo;merge&rsquo; involves two
cards &mdash; but it will generally work just fine.
</para>

<para>
You can use this same approach to merge more than 2 devices - the
resulting <code>pcm.DEVICE-NAME</code> specification will obviously
include more lines. You can also use different devices than we did
above, where we just used the first and second installed card.
</para>

<para>
Note that you are likely to be better off using <code>hw:CARD</code> device names,
rather than <code>hw:N</code> names, when defining a &lsquo;multi&rsquo; pseudo-device, as
explained here. But further note that if you are using multiple
instances of the same type of audio hardware (say, 4 RME Multiface
devices), you will have to use <code>hw:N</code> because every card will have the
same <code>CARD</code> name. In fact, with such hardware, it may be very
difficult to ensure that <code>hw:0</code> always refers to the same audio
interface, because there is no ALSA name that uniquely defines a
particular PCI slot. This is currently an unsolved problem when using
multiple identical devices. If you use PCI (or PCIe or PCIx or other
derivatives of PCI) devices, the chances are that the first card will
always be the same one, and so forth, so its not likely to be an
issue. If you use several identical USB devices, it may be a more
significant problem.
</para>

</listitem>
<listitem>
Using the <code>-P</code> and <code>-C</code> arguments to a JACK backend

<para>
Several JACK backends, including the ALSA, FFADO and CoreAudio
versions, support the <code>-P</code> and <code>-C</code> arguments that can
be used to specify two different devices, one for playback and one for
capture/recording. You cannot use this to merge multiple devices for
playback or capture. This approach will not do any clock drift
correction, so as the two devices drift over time, you may get
glitches in the audio stream. Nevertheless, it can be an easy if
unreliable way to set up JACK so that, for example, it records from a
USB microphone and plays back via a builtin audio device.
</para>

<para>
When using <code>-P</code> or <code>-C</code> to specify different devices, do
not use the <code>-d</code> argument (which specifies a single device) and
do not use the <code>-D</code> argument (which tells JACK to configure a
device for playback and capture).
</para>
</listitem>
</orderedlist>
</section>
</chapter>