<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book [
<!ENTITY % sgml.features "IGNORE">
<!ENTITY % xml.features "INCLUDE">
<!ENTITY % dbcent PUBLIC "-//OASIS//ENTITIES DocBook Character Entities V4.5//EN"
   "/usr/share/xml/docbook/schema/dtd/4.5/dbcentx.mod">
%dbcent;
<!ENTITY % keys SYSTEM "keys.ent">
%keys;
<!ENTITY % extensions SYSTEM "extensions.ent">
%extensions;
]>

<chapter xml:id="ch-signal-flow-and-the-mixer" xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en">
<title>Signal flow and the mixer</title>

<!-- Audio vs. MIDI -->

<para>
The second of Ardour's two main windows is the <emphasis>mixer</emphasis>.  A
typical mixer window is shown in <xref linkend="fig-mixer-summary"/>.
</para>

<figure id="fig-mixer-summary">
  <title>A typical mixer window</title> 
  <mediaobject>
    <imageobject> 
      <imagedata fileref="diagrams/mixer-summary&dia;"/>
    </imageobject> 
  </mediaobject>
</figure>

<para>
The mixer is roughly Ardour's equivalent of a physical mixing console
with some outboard processing.  It provides an overview of the signals
present in the session, and allows them to be mixed and processed.
</para>

<para>
At the left hand side of the window there are two useful lists; at the
top, a list of the session's tracks and busses, and at the bottom a
list of the track and bus groups.  Each track, bus and group has a
corresponding &lsquo;show&rsquo; tick-box which controls whether the corresponding
item is visible in the mixer.  These tick-boxes do not affect
visibility in the editor window.
</para>

<para>
The main body of the mixer window is taken up with mixer strips.  Each
track and bus has one of these, and there is an extra one for the
master bus.  An annotated single mixer strip is shown in
<xref linkend="fig-mixer-strip-summary"/>.
</para>

<figure id="fig-mixer-strip-summary">
  <title>A typical mixer strip</title> 
  <mediaobject>
    <imageobject> 
      <imagedata fileref="diagrams/mixer-strip-summary&dia;"/>
    </imageobject> 
  </mediaobject>
</figure>

<section>
<title>Signal flow in the strip</title>

<para>
This mixer strip represents the signal flow through a single track or
bus.  The input to the strip comes either from a set of JACK ports or
from the regions in a track's playlist.  The signal then flows through
a set of <emphasis>processors</emphasis>, which may include <emphasis>plugins</emphasis> (which
process the signal in some way) and a <emphasis>fader</emphasis> to control level.
The signal is then <emphasis>panned</emphasis> to its output ports.
</para>

<para>
The basic signal flow for a track is shown in
<xref linkend="fig-basic-track-signal-flow"/>.
</para>

<figure id="fig-basic-track-signal-flow">
  <title>Basic track signal flow</title> 
  <mediaobject>
    <imageobject> 
      <imagedata fileref="diagrams/basic-track-signal-flow&dia;"/>
    </imageobject> 
  </mediaobject>
</figure>

<section>
<title>Input</title>

<para>
At the top of the figure we have two possibilities for input data; it
can either come &lsquo;live&rsquo; from some JACK input ports (so that
it could have come from, for example, a sound card, or perhaps another
application) or it can come from disk.  If the track is record
enabled, the data from the JACK inputs is stored as-is on disk (with
no processing) when we are recording.  The signal that goes into the
actual strip can be chosen as either the live input or the disk;
Ardour can usually make this decision for you depending on what is
going on; alternatively, you can specify it manually.  This signal
heads into the strip's processors before being panned and passed to
the JACK outputs.
</para>

<para>
A bus&rsquo; signal flow is similar, except that there is no disk storage
involved, so there is no input switching; the signal always comes from
its JACK input ports.
</para>

<para>
Let us examine the mixer strip with reference to this signal flow.
Towards the top of the strip you will see the <emphasis>input connections</emphasis>
button.  Left-clicking this button opens a connection editor, which
allows you to set up the input connections from other JACK ports to
the inputs for the strip.  A typical connection editor is shown in
<xref linkend="fig-input-connection-matrix"/>.
</para>

<figure id="fig-input-connection-matrix"> 
  <title>A mixer strip input connection editor</title> 
  <mediaobject>
    <imageobject> 
      <imagedata fileref="screenshots/input-connection-matrix&scs;"/>
    </imageobject> 
  </mediaobject>
</figure>

<para>
In this case, we have an audio track called &lsquo;Audio 2&rsquo;
which has a single input.  At the bottom of the connection manager you
can see a label of &lsquo;Audio 2 in&rsquo;, which represents this
input.  To the left of the window are the places that this input can
come from.  In the example screenshot, we can see that two JACK ports
called &lsquo;in 1+2&rsquo; are shown, and there is a green dot which
represents a connection between the L channel of &lsquo;in 1+2&rsquo;
and our track input.  The signal for &lsquo;in 1+2&rsquo; is coming
from a sound card in the computer that Ardour is running on.  The
connection manager's behaviour is discussed in detail in <xref
linkend="sec-manual-connections"/>.
</para>

<para>
An alternative to using the connection editor is to right-click on the
input button.  This will offer a menu with what Ardour expects may be
common choices for your strip's input ports.
</para>

</section>
<section><title>Processors</title>

<para>
A &lsquo;processor&rsquo; is a thing which treats the signal in some
way.  Ardour provides several processors, some of which are for
internal use and are not seen in the mixer strip.  In addition,
processors can also be plugins.  The arrangement of processors is
arbitrary, and there is no limit to how many there can be.
</para>

<para>
The main box in the top half of the mixer strip shows the processor
list.  Processors are shown as coloured rectangles, with a small &lsquo;LED&rsquo;
beside them; this indicates whether or not the plugin is enabled, and
can be clicked to enable or disable a processor.  The colour of the
processor depends on its location in the sequence; processors that
occur before the fader are coloured in red, and those after are
coloured green.
</para>

<para>
The processor box will always contain a blue processor called &lsquo;Fader&rsquo;.
This indicates where in the processor chain the main volume fader is
located &mdash; this is the fader in the bottom half of the strip.
</para>

<section>
<title>Moving processors around</title>

<para>
Processors can be moved around in the chain by dragging and dropping.
You can also drag processors from other strips in the mixer to copy
them into this strip.  
</para>

</section>
<section><title>Adding plugins</title>

<para>
Perhaps the most common use for the processor box is to add
<emphasis>plugins</emphasis>.  These are self-contained pieces of code which peform
some processing on the signal; typical examples of plugins might
include compressors, equalisers, reverbs and so on.
</para>

<para>
Plugins must be installed onto your computer before they can be used.
There are a variety of ways of doing this: on Linux, your distribution
may well include packages of plugins.  Alternatively, they can be
downloaded from various places on the internet, or can be bought from
commercial companies.
</para>

<!--% more detail about plugins availability, standards, etc. etc.-->

<para>
To add a plugin to a strip, right-click over the processor box and
choosing &lsquo;New Plugin&rsquo;.  You can choose one straight from the
menu, or open the &lsquo;Plugin Manager&rsquo; which gives a few extra
facilities for finding the right plugin.  Once a plugin is selected,
it will appear in the strip and start processing the signals that flow
down the strip.  Double-clicking on a plugin's name in the processor
box will open its editor window, which allows you to alter its
parameters.  Alternatively, right-clicking on the plugin and selecting
<guimenuitem>Show All Controls</guimenuitem> from the
<guimenu>Controls</guimenu> menu adds the plugins controls directly to
the processor box.  This may be convenient for plugins with few
controls, such as the plate reverb shown in the example screenshot.
</para>

</section>
<section><title>Sends</title>
<indexterm><primary>send</primary></indexterm>

<para>
Another type of processor that is available is the <emphasis>send</emphasis>.  A
send sits in the processor list, passing signals through untouched,
but also splits off (or &lsquo;sends&rsquo;) the signal somewhere else.  That
&lsquo;somewhere else&rsquo; can be a set of JACK ports or an Ardour bus.  Sends
are typically used for passing a track's signal to a reverb unit, or
perhaps to set up a headphone mix for an artist.
</para>

<para>
If the send is to an Ardour bus, we refer to it as an &lsquo;Aux send&rsquo;.
Such a send can be added to a strip by right-clicking in the processor
box and following the <guimenuitem>New Aux Send</guimenuitem> option.  The submenu offers
a list of the busses in the session, and you can choose the one that
the send should push its signal to.
</para>

<para>
Alternatively, a send to a set of JACK ports (an &lsquo;external
send&rsquo;) can be added using <guimenuitem>New External
Send</guimenuitem>.  On creating an external send, a connection editor
opens so that you can connect the send to wherever it needs to go.
This could be an audio card output (for sending to some headphones or
to a hardware effects unit), another JACK-based application that you
have running, or whatever.
</para>

<para>
Sends have a small fader in the processor box which controls the
amount of the strip's signal that they will send to their destination.
</para>

</section>
</section>
<section>
<title>Panning</title>

<para>
After passing through the processors, our signal arrives at the
panner.  The panner has the task of arranging however many channels of
audio we have at the end of our processor list to pass to the outputs.
This is reasonably simple in some cases (for example if we have a mono
track and stereo outputs), but can also be very complicated (it is not
immediately obvious, for example, how one might pan a 14-channel track
to 37 outputs).
</para>

<para>
Ardour will try to pick a good panner for each particular situation.
</para>

</section>
<section>
<title>Output ports</title>

<para>
Finally, the button at the very bottom of the strip sets where the
output signal from the strip will go.  Frequently, this will be the
master bus (and Ardour may auto-connect new tracks and busses to the
master, depending on its configuration).  As with the input ports, a
left-click on the output port button will open a connection editor,
and a right-click will open a menu of common options.
</para>

</section>
<section xml:id="sec-monitoring"><title>Monitoring</title>
<indexterm><primary>monitoring</primary></indexterm>

<para>
As we discussed earlier, there are two places that a track's signal
may come from: its JACK ports, or its files on disk.  The choice of
which to use at any given time is usually made automatically by
Ardour, depending on the configuration of its monitoring options.
</para>

<para>
&lsquo;Monitoring&rsquo; in Ardour is the general term used for the frequent need
to listen to signals that are coming into the computer, perhaps as
they are being recorded.  Often, for example, one might be playing an
instrument for a recording and might want to hear what one is doing at
the same time, perhaps along with some other existing tracks.
</para>

</section>
<section><title>Different ways of monitoring</title>

<para>
There are three basic ways in which monitoring may be approached:
</para>

<itemizedlist>
<listitem> External monitoring &mdash; this is where Ardour plays no
role in monitoring at all.  Perhaps the recording set-up has an
external mixer which can be used to set up monitor mixes, or perhaps
the sound-card being used has some &lsquo;listen to the
input&rsquo;-style feature.  This approach often has the advantage of
zero or near-zero latency.  On the other hand it requires external
hardware, and the monitoring settings are not saved with the session.
See <xref linkend="fig-external-monitoring"/> for a simple example
setup.

<figure id="fig-external-monitoring">
  <title>External monitoring</title> 
  <mediaobject>
    <imageobject> 
      <imagedata fileref="diagrams/external-monitoring&dia;"/>
    </imageobject> 
  </mediaobject>
</figure>

</listitem>
<listitem> JACK-based &lsquo;hardware&rsquo; monitoring &mdash; some sound cards have the
  ability to mix signals from their inputs to their outputs with zero-
  or low-latency.  Furthermore, on some cards these features can be
  controlled by JACK.  This is a nice arrangement, if the sound card
  supports it, as it combines the convenience of having the monitoring
  controlled by Ardour with the low latency operation of doing it
  externally.  See <xref linkend="fig-jack-monitoring"/>.

<figure id="fig-jack-monitoring">
  <title>JACK-based &lsquo;hardware&rsquo; monitoring</title> 
  <mediaobject>
    <imageobject> 
      <imagedata fileref="diagrams/jack-monitoring&dia;"/>
    </imageobject> 
  </mediaobject>
</figure>

</listitem><listitem> Software monitoring &mdash; this where all monitoring is performed
  by Ardour; it makes track inputs available at track outputs, under
  the influence of various controls.  This approach will almost always
  have more routing flexibility than JACK-based monitoring.  The
  disadvantage is that there will be a latency between the input and
  the output which will depend mainly on the JACK buffer size that is
  being used.

<figure id="fig-ardour-monitoring">
  <title>Software monitoring</title> 
  <mediaobject>
    <imageobject> 
      <imagedata fileref="diagrams/ardour-monitoring&dia;"/>
    </imageobject> 
  </mediaobject>
</figure>

</listitem>
</itemizedlist>

<section><title>Setting up monitoring</title>

<para>
There are three main settings which affect how monitoring is
performed.  The first is &lsquo;Record monitoring handled by&rsquo; in
the <guilabel>Audio</guilabel> tab of the <guilabel>Ardour
Preferences</guilabel> dialogue.  There are two or three options here,
depending on the capabilities of your hardware:
</para>

<itemizedlist>
<listitem> <emphasis>ardour</emphasis> &mdash; Ardour handles monitoring itself (software monitoring).
</listitem><listitem> <emphasis>audio hardware</emphasis> &mdash; Ardour does no monitoring at all, and
  assumes you will do it yourself (external monitoring)
</listitem><listitem> <emphasis>JACK</emphasis> &mdash; Ardour will ask JACK to, in turn, ask the sound
  card to handle monitoring.  This option is only available if it is
  supported by your sound card (hardware monitoring).
  </listitem>
</itemizedlist>

<para>
The other two settings are more complex; one is &lsquo;Tape machine
mode&rsquo;, in the same dialogue, and the other is &lsquo;Monitoring
automatically follows transport state
(&lsquo;auto-input&rsquo;)&rsquo; setting in <guilabel>Session
Properties</guilabel>.
</para>

<para>
Monitoring is also somewhat dependent on the state of the track's
record-enable button, the session record enable button, and whether or
not the transport is rolling.
</para>

</section>
<section><title>Monitoring in software or hardware monitoring modes</title>

<para>
If Ardour is set to &lsquo;external monitoring&rsquo;, the explanation of Ardour's
monitoring behaviour is simple: it does not do any.  In the other two
modes, things are more complex.
</para>

</section>
<section><title>Monitoring in non-tape-machine mode</title>

<para>
This section describes what happens when Ardour is <emphasis>not</emphasis> set to
tape-machine mode.
</para>

<para>
Consider first the case when a track is record-enabled.  In this
situation, it will always monitor the live input <emphasis>unless</emphasis> the
session is <emphasis>not</emphasis> record-enabled, auto-input is enabled, and the
transport is rolling.  
</para>

<para>
When a track is not record-enabled, the track will play back its
contents from disc <emphasis>unless</emphasis> the transport is stopped and
auto-input is enabled.  In this case, the track monitors its live
input.
</para>

</section>
<section><title>Monitoring in tape-machine mode</title>

<para>
In tape-machine mode, things are slightly simpler; when a track is
record-enabled, its behaviour is the same as in non-tape-machine mode:
it will always monitor the live input <emphasis>unless</emphasis> the session is
<emphasis>not</emphasis> record-enabled, auto-input is enabled, and the transport is
rolling.
</para>

<para>
When a track is not record-enabled, however, the track will always
just play back its contents from disk; the live input will never be
monitored.
</para>

<!--
Some more rational explanation of why things are like this
Metering!
-->

</section>
</section>
</section>

<section><title>Overall signal flow and solo / mute</title>

<para>
The previous section explores how signals flow within individual mixer
strips.  This section discusses the wider picture of signal flow
within Ardour as a whole, particularly with regard to track soloing and
muting.
</para>

<section><title>The master bus</title>

<para>
Ardour sessions always contain a special bus called the <emphasis>master
  bus</emphasis>.  Mostly, this is like a normal bus, but it has some special properties:
</para>

<itemizedlist>
<listitem> Ardour can be configured to connect other tracks
  and busses to the master bus automatically.
</listitem><listitem> The master bus&rsquo; mixer strip is always displayed at the
  right-hand-side of the mixer window.
  </listitem>
</itemizedlist>

<para>
Typically, most of a session's tracks will send their output to the
master bus, and the output from the master bus will be connected to
some ports on a physical sound card so that the mix makes it
out into the real world to be listened to.
</para>

</section> <!-- The master bus -->

<section><title>The monitor bus</title>

<para>
The monitor bus is an additional, optional, and more specialised type
of bus.  Ardour can configured to use a monitor bus by ticking the
&lsquo;Use a monitor bus&rsquo; option in the <guilabel>Audio</guilabel> tab
of the <guilabel>Ardour Preferences</guilabel> dialogue.
</para>

<!-- XXX?
%% If you are using a monitor bus, an extra &lsquo;monitor control&rsquo; section will appear in the mixer window. -->

<para>
The monitor bus provides a quite large degree of extra control, and is
an approximation to the setup of a moderately complex mixing desk,
which often has a separate <emphasis>mix bus</emphasis> and <emphasis>monitor bus</emphasis>.  In
a live situation, for example, it is common for the mix bus to be
connected to the front-of-house speakers and the monitor bus to be
listened to on headphones.  In a studio, one might have the monitor
bus connected to the control room outputs and the mix bus connected to
a 2-track output recorder.
</para>

</section> <!-- The monitor bus -->

<section xml:id="sec-mute-and-solo"><title>Mute and solo</title>

<para>
Each track and bus has two buttons which have important implications
for signal flow: <emphasis>mute</emphasis> and <emphasis>solo</emphasis>.  The behaviour of these
buttons is configurable in Ardour, so that they can behave in one of a
few different ways to suit different studio set-ups.
</para>

<section><title>Without a monitor bus</title>

<para>
If you are using Ardour <emphasis>without</emphasis> a monitor bus, there is only
one way in which mute and solo will work.  Without a monitor bus:
</para>

<itemizedlist>
<listitem> <emphasis>Mute</emphasis> on a track or bus will mute that track on the
  master bus, so that it will not be heard.
</listitem><listitem> <emphasis>Solo</emphasis> on a track or bus will solo that track or bus and
  mute all others <emphasis>except that</emphasis> soloing a bus will also solo any
  tracks or busses that feed that bus.
  </listitem>
</itemizedlist>

</section> <!-- Without a monitor bus -->

<section><title>With a monitor bus</title>

<para>
For setups <emphasis>with</emphasis> a monitor bus, you have more options, mostly
governed by the setting of the &lsquo;Solo controls are Listen controls&rsquo;
option in the <guilabel>Solo / mute</guilabel> tab of &lsquo;Ardour Preferences&rsquo;.
</para>

<para>
With &lsquo;Solo controls are Listen controls&rsquo; unticked, behaviour is almost
exactly the same as the situation without a monitor bus.  Mute and
solo behave the same, and the monitor bus is fed from the master bus,
so it sees the same thing.
</para>

<para>
With &lsquo;Solo controls are Listen controls&rsquo; ticked, things change; the
master and monitor busses behave differently.  In this mode, solo
controls are more properly called &lsquo;listen&rsquo; controls, and Ardour's solo
buttons will change their legend from &lsquo;S&rsquo; to either &lsquo;A&rsquo; or &lsquo;P&rsquo; (we'll
come to that shortly) to reflect this.
</para>

<para>
Now, without any mute or listen, the monitor bus remains fed by the
master bus.  Also:
</para>

<itemizedlist>
<listitem> <emphasis>Mute</emphasis> will mute the track or bus, so that it will not be
  heard anywhere (neither on the master nor monitor busses), much as before.
</listitem><listitem> <emphasis>Listen</emphasis> will disconnect the monitor bus from the master
  bus, so that the monitor bus now only receives things that are
  &lsquo;listened&rsquo;.  Listen will not perform any muting, and hence the
  master bus will not be affected by a listened track or bus.
  </listitem>
</itemizedlist>

<para>
There are further options with when solo controls are listen controls:
the part of the track or bus from which the listen signal is obtained
can be configured.  Underneath the &lsquo;Solo controls are Listen controls&rsquo;
option in &lsquo;Ardour Preferences&rsquo; is an option for &lsquo;listen position&rsquo;,
which can be either After-Fade Listen (AFL) or Pre-Fade Listen (PFL).
AFL, as its name suggests, obtains its signal from some point after
the track or bus&rsquo; fader, and PFL from before it.  The precise point to
get the signal from can further be configured using the &lsquo;PFL signals
come from&rsquo; and &lsquo;AFL signals come from&rsquo; options.
</para>

<para>
The solo-mute arrangement with a monitor bus is shown in <xref linkend="fig-solo-mute"/>.
</para>

<figure id="fig-solo-mute">
  <title>Solo and mute with a monitor bus</title>
  <mediaobject>
    <imageobject> 
      <imagedata fileref="diagrams/solo-mute&dia;"/>
    </imageobject> 
  </mediaobject>
</figure>

<para>
Here we have a number of tracks or busses (in orange).  Each one has
an output which feeds the master bus.  In addition, each has PFL and
AFL outputs; we have a choice of which to use.  PFL/AFL from each
track or bus are mixed.  Then, whenever anything is set to AFL/PFL,
the monitor out becomes just those AFL/PFL feeds; the rest of the
time, the monitor out is fed from the master bus.
</para>

<para>
In this scheme Solo has no effect other than to mute other non-soloed
tracks; with solo (rather then listen), the monitor out is fed from
the master bus.
</para>

</section> <!-- With a monitor bus -->

<section><title>Other solo options</title>

<para>
There are a few other configuration options related to the behaviour
of solo.  They can be found in the <guilabel>Solo / Mute</guilabel>
tab of <guilabel>Ardour Preferences</guilabel> dialogue.
</para>

<section><title>Solo-in-place mute cut</title>

<para>
When using &lsquo;solo-in-place&rsquo; (SiP), in other words when soloed tracks
are being listened to on the master bus, this fader specifies the gain
that will be applied to other tracks in order to mute them.  Setting
this level to &infin;dB will mean that other tracks will not be
heard at all; setting to some higher value less than 0dB means that
other non-soloed tracks will be heard, just reduced in volume compared
to the soloed tracks.
</para>

</section> <!-- Solo-in-place mute cut -->

<section><title>Exclusive solo</title>

<para>
If this is enabled, only one track or bus will ever be soloed at once;
soloing track B while track A is currently soloed will un-solo
track A before soloing track B.
</para>

</section> <!-- Exclusive solo -->

<section><title>Show solo muting</title>

<para>
If this is enabled, the mute button of tracks and busses will be drawn
outlined to indicate that the track or bus is muted because something
else is soloed.
</para>

</section> <!-- Show solo muting -->

<section><title>Soloing overrides muting</title>

<para>
If this is enabled, a track or bus that is both soloed and muted will
behave as if it is soloed.
</para>

</section> <!-- Soloing overrides muting -->

<section><title>Mute affects&hellip;</title>

<para>
These options dictate whether muting the track will affect various
routes out of the track; through the sends, through the control
outputs (to the monitor bus) and to the main outputs.
</para>

</section> <!-- Mute affects... -->

</section> <!-- Other solo options -->
</section> <!-- Mute and solo -->
</section> <!-- Overall signal flow and solo / mute -->

<section>
<title>Connecting things</title>

<para>
Ardour provides various ways of interconnecting the tracks and busses
of a session with the outside world (your sound card and other
JACK-enabled applications).
</para>

<section xml:id="sec-automatic-connections">
<title>Automatic connections</title>

<para>
There are some connections which are reasonably common and therefore
fairly easy for Ardour to guess.  It will make these connections
automatically, if configured to do so.  Auto-connection can be set up
in the <guilabel>Audio</guilabel> tab of the <guilabel>Ardour
Preferences</guilabel> dialogue.
</para>

<title>Auto-connect master/monitor busses</title>

<para>
<emphasis>Auto-connect master/monitor busses</emphasis> will instruct Ardour to
connect the outputs of the master and monitor busses to the first
<inlineequation><alt>N</alt>N</inlineequation> &lsquo;physical&rsquo;
JACK ports, where <inlineequation><alt>N</alt>N</inlineequation> is
the number of channels in your master bus (e.g. 2 for stereo).
</para>

<!-- there is the monitor_bus_preferred_bundle but no-one sets it -->

<para>
&lsquo;Connect track inputs&rsquo; sets how new track inputs should be set up;
they can either be automatically connected to physical inputs or left
alone for you to connect yourself.
</para>

<para>
&lsquo;Connect track and bus outputs&rsquo; sets how new track and bus outputs
should be set up; they can either be connected automatically to
physical outputs, or to the master bus, or can be left alone for you to connect manually.
</para>

</section>

<section id="sec-manual-connections">
<title>Manual connections</title>

<para>
You can, of course, also change connections manually.  This is done
using a connection manager dialogue, like the one in <xref
linkend="fig-connection-manager"/>.
</para>

<figure id="fig-connection-manager"> 
  <title>A connection editor</title> 
  <mediaobject>
    <imageobject> 
      <imagedata fileref="screenshots/connection-manager&scs;"/>
    </imageobject> 
  </mediaobject>
</figure>

<para>
The connection manager presents two groups of ports; one set of source
(which produce data), and one of destinations (which consume data).
Depending on the relative number of each, the sources will be placed
on the left or the top of the dialogue, and the destinations on the
right or the bottom.  Thus, in general, signal flow is from top or
left to right or bottom.
</para>

<para>
Both sources and destinations are divided up into groups, with each
group being given a tab.  To show the ports in each group
(&lsquo;Ardour Busses&rsquo;, &lsquo;Ardour Tracks&rsquo; and so on),
simply click on the tab.
</para>

<para>
The groups that are used are as follows:
</para>

<itemizedlist>
<listitem>
<emphasis>Hardware</emphasis> &mdash; ports which are connected to a
physical piece of hardware (a sound card or MIDI interface).
</listitem>
<listitem>
<emphasis>Ardour Busses</emphasis> &mdash; ports belonging to busses.
</listitem>
<listitem>
<emphasis>Ardour Tracks</emphasis> &mdash; ports belonging to tracks.
</listitem>
<listitem>
<emphasis>Ardour Misc</emphasis> &mdash; other ports that do not fit
into the previous two categories; for example, the ports on which the
metronome click is output, and MIDI ports for things like control surfaces and timecode.
</listitem>
</itemizedlist>

<para>
The main body of the connection manager is a grid.  Within this grid,
green dots represent connections, and you can click in any of the
squares to make or break connections.  You can also click and drag to
draw a line of connections, which is sometimes useful for making many
connections at once.
</para>

<para>
In the example manager of <xref linkend="fig-connection-manager"/> we
can note various things.  We are using the &lsquo;Ardour Tracks&rsquo;
sources tab, so we see the output ports of the three tracks in our
session: Fred, Jim and Foo.  Our destinations are from the
&lsquo;Ardour Busses&rsquo; tab, so we have the inputs of a session
bus, Sheila, and the inputs of the master bus.  Fred and Jim have
stereo outputs, so have L and R connections.  Foo is a MIDI track, so
it only has one connection, and its squares in the grid are coloured
light grey to indicate that no connection can be made between Foo (a
MIDI output) and our busses (which are all audio-input).
</para>

<para>
The green dots in the example show that both Foo and Bar are connected
to the master bus, left to left and right to right.
</para>

<section>
<title>Different connection managers</title>

<para>
Slightly different versions of the connection manager are available
from different places in Ardour.  For a global view of all JACK audio
connections, use the <guilabel>Audio Connection Manager</guilabel>
which can be opened from the <guimenu>Window</guimenu> menu, or by
using <keycombo><keycap>&modtwo;</keycap><keycap>P</keycap></keycombo>.  A corresponding <guilabel>MIDI
Connection Manager</guilabel> can be opened using
<keycombo><keycap>&modtertiary;</keycap><keycap>&modtwo;</keycap><keycap>P</keycap></keycombo>.
</para>

<!-- try to explain rationale for having some MIDI connections in audio
managers, and vice versa -->

<para>
There is also a connection manager available when connecting
individual tracks; clicking on the input or output buttons of a mixer
strip will open a connection manager which has the corresponding track
input or output as the only destination or source, with all other ports
available for connection to it.
</para>

</section>

<section>
<title>Other connection manager features</title>

<para>
Right-clicking on a port name in the connection manager opens a menu
which provides a few handy options:
</para>

<itemizedlist>
<listitem>
<emphasis>Add audio port</emphasis> and <emphasis>Add MIDI
port</emphasis> &mdash; these options add audio or MIDI ports to the
thing that you opened the menu over, if this is possible.  In this
way, for example, tracks and busses can be extended to have more
inputs or outputs.
</listitem>
<listitem>
<emphasis>Remove</emphasis> &mdash; removes the given port, if possible.
</listitem>
<listitem>
<emphasis>Disconnect all from&hellip;</emphasis> &mdash; disconnects
everything from the given port.
</listitem>
<listitem>
<emphasis>Rescan</emphasis> &mdash; Ardour will try to keep abreast of
any changes to the JACK ports on your system, and reflect them in any
connection managers which are open.  If for some reason this fails,
choosing <guimenuitem>Rescan</guimenuitem> will re-scan the list of
ports and update the manager.
</listitem>
<listitem>
<emphasis>Show individual ports</emphasis> &mdash; if you have a
session which has lots of multi-channel tracks or busses, it may be an
unnecessary detail that you have to connect left to left and right to
right every time you make a connection.  This obviously gets worse
with higher channel counts (such as for 5.1 or ambisonics).  To make
life easier with such sessions, you can untick <guilabel>Show
individual ports</guilabel>.  After that, the channels of tracks and
busses will be hidden, and any green dots you add in the connection
manager will automatically connect each channel of the source to the
corresponding channel of the destination (left to left, right to right
and so on).  In this mode, a half-circle in the connection grid
indicates that some (but not all) of the source's ports are connected
to the destination.
</listitem>
</itemizedlist>

</section>

</section>

</section>
</chapter>

